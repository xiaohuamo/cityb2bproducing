<?php
declare (strict_types = 1);

namespace app\product\controller;

use think\facade\Db;
use think\facade\Queue;
use think\Model;
use think\Request;
use app\product\validate\IndexValidate;
use app\product\service\BoxNumber;
use app\model\{
    Order,
    WjCustomerCoupon,
    DispatchingProgressSummery,
    DispatchingItemBehaviorLog
};
use think\Validate;

class PickingItem extends AuthBase
{
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function index()
    {
        // 模板输出
        return $this->fetch('index');
    }


    //根据筛选日期获取初始化数据
    public function iniData()
    {
        //接收参数
        $param = $this->request->only(['logistic_delivery_date','logistic_truck_No','one_cate_sort','type']);
        $param['logistic_truck_No'] = $param['logistic_truck_No']??'';
        $param['one_cate_sort'] = $param['one_cate_sort']??0;

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();

        $Order = new Order();
        $WjCustomerCoupon = new WjCustomerCoupon();
        //3.获取对应日期默认全部的司机的已加工订单数量和总的加工订单数量
        $driver_order_count = $Order->getOrderCount($businessId,$param['logistic_delivery_date'],$param['logistic_truck_No'],2);
        //4.获取对应日期全部的已加工订单数量和总的加工订单数量
        $all_order_count = $Order->getOrderCount($businessId,$param['logistic_delivery_date'],'',2);
        //5.获取分类的信息
        $cate = $WjCustomerCoupon->getPickingItemCategory($businessId,$user_id,$param['logistic_delivery_date'],$param['logistic_truck_No'],$param['one_cate_sort']);
        $data = [
            'cate' => $cate,
            'driver_order_count' => $driver_order_count,
            'all_order_count' => $all_order_count,
        ];
        return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$data);
    }

    //切换以及类目获取对应的信息
    public function changeCate()
    {
        //接收参数
        $param = $this->request->only(['logistic_delivery_date','logistic_truck_No','one_cate_id','two_cate_id']);
        $param['logistic_truck_No'] = $param['logistic_truck_No']??'';
        $param['one_cate_id'] = $param['one_cate_id']??0;
        $param['two_cate_id'] = $param['two_cate_id']??0;

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();

        $WjCustomerCoupon = new WjCustomerCoupon();

        //1.获取对应日期加一级类目的产品信息
        $product = $WjCustomerCoupon->getOneCateProductList($businessId,$user_id,$param['logistic_delivery_date'],$param['logistic_truck_No'],$param['one_cate_id'],$param['two_cate_id']);
        $data = [
            'product' => $product,
        ];
        return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$data);
    }

    //获取产品的订单明细信息
    public function productItemOrderDetailList()
    {
        //接收参数
        $param = $this->request->only(['logistic_delivery_date','logistic_truck_No','product_id','guige1_id','wcc_sort','wcc_sort_type']);
        $param['guige1_id'] = $param['guige1_id']??'';
        $param['wcc_sort'] = $param['wcc_sort']??0;//排序字段
        $param['wcc_sort_type'] = $param['wcc_sort_type']??1;//1-正向排序 2-反向排序

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();//当前操作用户

        $Order = new Order();
        //获取对应日期的加工订单
        $order = $Order->getProductItemOrderList($businessId,$user_id,$param['logistic_delivery_date'],$param['logistic_truck_No'],$param['product_id'],$param['guige1_id'],$param['wcc_sort'],$param['wcc_sort_type']);
        $redis = redis_connect();
        $param['guige1_id'] = empty($param['guige1_id'])?0:$param['guige1_id'];
        $key = 'fit_print_all_'.$param['logistic_delivery_date'].'_'.$param['product_id'].'_'.$param['guige1_id'];
        $is_print_all = $redis->get($key);
        $data = [
            'order' => $order,
            'is_print_all' => !empty($is_print_all)?1:2,//是否全部打印 1是 2否
        ];
        return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$data);
    }

    //picking&sum页面锁定非生产产品
    public function lockProductItem()
    {
        //接收参数
        $param = $this->request->only(['logistic_delivery_date','logistic_truck_No','product_id','guige1_id']);
        $param['logistic_truck_No'] = $param['logistic_truck_No']??'';
        $param['guige1_id'] = $param['guige1_id']??'';

        $validate = new IndexValidate();
        if (!$validate->scene('lockProductItem')->check($param)) {
            return show(config('status.code')['param_error']['code'], $validate->getError());
        }

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();//当前操作用户

        //1.获取产品信息
        $WjCustomerCoupon = new WjCustomerCoupon();
        $product_data = $WjCustomerCoupon->getPickProductData($businessId,$user_id,$param['logistic_delivery_date'],$param['logistic_truck_No'],$param['product_id'],$param['guige1_id']);
//        halt($product_data);
        if (!$product_data) {
            return show(config('status.code')['param_error']['code'], config('status.code')['param_error']['msg']);
        }

        //添加队列
        $uniqid = uniqid(time().mt_rand(1,1000000), true);
        $jobData = [
            "uniqid" => $uniqid,
            "user_id" => $user_id,
            "businessId" => $businessId,
            "data" => $param
        ];
        $isPushed = Queue::push('app\job\JobLockPickProductItem', $jobData, 'lockPickProductItem');
        // database 驱动时，返回值为 1|false  ;   redis 驱动时，返回值为 随机字符串|false
        if ($isPushed !== false) {
            $data = [
                "uniqid" => $uniqid,
            ];
            return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$data);
        } else {
            return show(config('status.code')['lock_error']['code'],config('status.code')['lock_error']['msg']);
        }
    }

    //获取锁定结果
    public function lockProductItemResult()
    {
        //接收参数
        $param = $this->request->only(['uniqid']);
        $uniqid = $param['uniqid'];
        if ($uniqid) {
            $redis = redis_connect();
            $res = $redis->get($uniqid);
            if ($res) {
                $temp = json_decode($res, true);
                $redis->del($uniqid);
                return show($temp['status'],$temp['message'],$temp['result']);
            } else {
                return show(config('status.code')['lock_result_error']['code'],config('status.code')['lock_result_error']['msg']);
            }
        }
    }

    //解锁
    public function unlockProductItem()
    {
        //接收参数
        $param = $this->request->only(['logistic_delivery_date','logistic_truck_No','product_id','guige1_id']);
        $param['logistic_truck_No'] = $param['logistic_truck_No']??'';
        $param['guige1_id'] = $param['guige1_id']??'';

        $validate = new IndexValidate();
        if (!$validate->scene('lockProductItem')->check($param)) {
            return show(config('status.code')['param_error']['code'], $validate->getError());
        }

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();//当前操作用户
        try{
            Db::startTrans();
            //1.获取产品信息
            $WjCustomerCoupon = new WjCustomerCoupon();
            $product_data = $WjCustomerCoupon->getPickProductData($businessId,$user_id,$param['logistic_delivery_date'],$param['logistic_truck_No'],$param['product_id'],$param['guige1_id']);
//        halt($product_data);
            if (!$product_data) {
                return show(config('status.code')['param_error']['code'], config('status.code')['param_error']['msg']);
            }
            //如果该产品已加工完，不可重复点击锁定解锁
            if ($product_data['isDone'] == 1) {
                return show(config('status.code')['lock_processed_error']['code'], config('status.code')['lock_processed_error']['msg']);
            }
            //判断该产品是否是当前上锁人解锁的
            if ($product_data['operator_user_id'] != $user_id) {
                return show(config('status.code')['unlock_user_error']['code'], config('status.code')['unlock_user_error']['msg']);
            }
            //解锁
            $WjCustomerCoupon->updatePickProductItemProcessedData($businessId,$param['logistic_delivery_date'],$param['logistic_truck_No'],$param['product_id'],$param['guige1_id'],$user_id,2);
            Db::commit();
            //添加用户行为日志
            $DispatchingItemBehaviorLog = new DispatchingItemBehaviorLog();
            $DispatchingItemBehaviorLog->addProducingBehaviorLog($user_id,$businessId,2,$param['logistic_delivery_date'],$param);
            return show(config('status.code')['success']['code'],config('status.code')['success']['msg']);
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return show(config('status.code')['system_error']['code'], $e->getMessage());
        }
    }

    //修改订单明细状态
    public function pickChangeProductItemStatus()
    {
        //接收参数
        $param = $this->request->only(['id','is_producing_done','logistic_truck_No','product_id','guige1_id']);
        $param['logistic_truck_No'] = $param['logistic_truck_No']??'';
        $param['product_id'] = $param['product_id']??'';
        $param['guige1_id'] = $param['guige1_id']??'';
        $validate = new IndexValidate();
        if (!$validate->scene('changeProductOrderStatus')->check($param)) {
            return show(config('status.code')['param_error']['code'], $validate->getError());
        }

        try{
            Db::startTrans();

            $businessId = $this->getBusinessId();
            $user_id = $this->getMemberUserId();//当前操作用户
            $order_inc_num = 0;//加工完成订单数据新增
            $driver_order_inc_num = 0;//对应的司机加工订单数据新增
            $is_product_guige1_done = 0;//该产品/规格对应的总量是否完毕
            $is_product_guige1_all_done = 0;//该产品是否所有规格都完毕
            $is_cate_all_done = 0;//该分类下的产品是否全部完成

            //1.获取订单明细信息
            $WjCustomerCoupon = new WjCustomerCoupon();
            $wcc_info = $WjCustomerCoupon->getWccInfo($param['id'],$businessId);
            if (!$wcc_info) {
                return show(config('status.code')['order_error']['code'], config('status.code')['order_error']['msg']);
            }
            if($wcc_info['dispatching_is_producing_done'] == $param['is_producing_done']){
                return show(config('status.code')['summary_done_error']['code'], config('status.code')['summary_done_error']['msg']);
            }
            //获取该产品的数据
            $product_data = $WjCustomerCoupon->getWccProductList($businessId,$user_id,$wcc_info['logistic_delivery_date'],$param['logistic_truck_No'],$wcc_info['product_id']);
            //计算完成的总数
            $sum_quantities = 0;//该产品的总数量
            $guige_sum_quantities = 0;//该规格的总数量
            $finish_quantities = 0;//该产品完成的总数量
            $guige_finish_quantities = 0;//该规格完成的总数量
            foreach ($product_data as $v){
                if($v['dispatching_is_producing_done'] == 1){
                    $finish_quantities += $v['customer_buying_quantity'];
                    if($wcc_info['guige1_id'] > 0 && $v['guige1_id'] == $wcc_info['guige1_id']){
                        $guige_finish_quantities += $v['customer_buying_quantity'];
                    }
                }
                $sum_quantities += $v['customer_buying_quantity'];
                if($wcc_info['guige1_id'] > 0 && $v['guige1_id'] == $wcc_info['guige1_id']){
                    $guige_sum_quantities += $v['customer_buying_quantity'];
                }
            }
            //一.已处理和正在处理流程
            if($param['is_producing_done'] == 1 || $param['is_producing_done'] == 2){
                //1-1.判断该产品是否有人加工，无人加工不可点击已处理
                if(!($wcc_info['dispatching_item_operator_user_id'] > 0)){
                    return show(config('status.code')['summary_process_error']['code'], config('status.code')['summary_process_error']['msg']);
                }
                //如果当前操作员工处理员工是否是同一个人
                if($wcc_info['dispatching_item_operator_user_id'] != $user_id){
                    return show(config('status.code')['lock_user_deal_error']['code'], config('status.code')['lock_user_deal_error']['msg']);
                }
                //2.更新该产品加工数量和状态
                WjCustomerCoupon::getUpdate(['id' => $wcc_info['id']],['dispatching_item_operator_user_id'=>$user_id,'dispatching_is_producing_done'=>$param['is_producing_done']]);
                if($param['is_producing_done'] == 2){
                    Db::commit();
                    return show(config('status.code')['success']['code'],config('status.code')['success']['msg']);
                }
                //产品完成总数量增加,判断是否完成
                $finish_quantities += $wcc_info['customer_buying_quantity'];
                if ($wcc_info['guige1_id'] > 0) {
                    $guige_finish_quantities += $wcc_info['customer_buying_quantity'];
                    if($guige_finish_quantities == $guige_sum_quantities){
                        $is_product_guige1_done = 1;
                        if($finish_quantities == $sum_quantities){
                            $is_product_guige1_all_done = 1;
                        }
                    }
                } else {
                    if($finish_quantities == $sum_quantities){
                        $is_product_guige1_all_done = 1;
                    }
                }
                //如果产品全部完成，判断该产品对应的分类是否完成
                if($is_product_guige1_all_done == 1){
                    $count = $WjCustomerCoupon->getWccOrderDone('',$businessId,$wcc_info['logistic_delivery_date'],$wcc_info['logistic_truck_No'],'',$wcc_info['cate_id'],2);
                    if($count == 0){
                        $is_cate_all_done = 1;
                    }
                }
                //2-2同时更新按订单拣货的汇总表,该订单是否全部拣货完成
                $dps_info = DispatchingProgressSummery::getOne(['orderId'=>$wcc_info['order_id'],'isDone'=>0,'isdeleted'=>0]);
                if(!empty($dps_info)){
                    $finish_quantities = $dps_info['finish_quantities']+1;
                    $dps_data['finish_quantities'] = $finish_quantities;
                    if($finish_quantities == $dps_info['sum_quantities']){
                        $dps_data['isDone'] = 1;
                    }
                    DispatchingProgressSummery::getUpdate(['id' => $dps_info['id']],$dps_data);
                }
                //3.判断该订单是否全部加工完毕
                //如果该产品对应规则的产品全部加工完毕，则更改订单加工状态
                $count = $WjCustomerCoupon->getWccOrderDone($wcc_info['order_id'],'','','','','',2);
                if($count == 0){
                    Order::getUpdate(['orderId' => $wcc_info['order_id']],[
                        'dispatching_is_producing_done'=>1
                    ]);
                    $order_inc_num = 1;//待加工产品全部完工，订单数+1
                    //判断对应司机的订单数，如果司机信息一致，则司机订单+1
                    if($param['logistic_truck_No']>0){
                        if($wcc_info['logistic_truck_No'] == $param['logistic_truck_No']){
                            $driver_order_inc_num = 1;
                        }else{
                            $driver_order_inc_num = 0;
                        }
                    }else{
                        $driver_order_inc_num = 1;
                    }
                }
                Db::commit();
                $DispatchingItemBehaviorLog = new DispatchingItemBehaviorLog();
                $log_data = [
                    "product_id" => $wcc_info['product_id'],
                    "guige1_id" => $wcc_info['guige1_id'],
                    "wj_customer_coupon_id" => $param['id']
                ];
                $DispatchingItemBehaviorLog->addProducingBehaviorLog($user_id,$businessId,3,$wcc_info['logistic_delivery_date'],$log_data);
                $data = [
                    'driver_order_inc_num' => $driver_order_inc_num,//对应司机的订单数是否增加
                    'order_inc_num' => $order_inc_num,//订单总数是否增加
                    'is_product_guige1_done' => $is_product_guige1_done,//当前加工产品对应的规格（没有规格即当前产品）是否加工完毕
                    'is_product_guige1_all_done' => $is_product_guige1_all_done, //当前产品（包括所有规格）是否全部加工完毕
                    'is_cate_all_done' => $is_cate_all_done
                ];
                return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$data);
            }
            //二.返回继续处理流程
            if($param['is_producing_done'] == 0){
                //2.更新该产品加工数量和状态
                WjCustomerCoupon::getUpdate(['id' => $wcc_info['id']],['dispatching_item_operator_user_id'=>$user_id,'dispatching_is_producing_done'=>0]);
                //同时将其他该产品对应的其他订单锁定为当前人员
                $WjCustomerCoupon->updatePickProductItemProcessedData($businessId,$wcc_info['logistic_delivery_date'],$param['logistic_truck_No'],$wcc_info['product_id'],$wcc_info['guige1_id'],$user_id,1);
                $finish_quantities -= $wcc_info['customer_buying_quantity'];
                $is_cate_all_done = 0;
                $is_product_guige1_all_done = 0;
                if ($wcc_info['guige1_id'] > 0) {
                    $guige_finish_quantities -= $wcc_info['customer_buying_quantity'];
                    $is_product_guige1_done = 0;
                }
                //2-2同时更新按订单拣货的汇总表,该订单是否全部拣货完成
                $dps_info = DispatchingProgressSummery::getOne(['orderId'=>$wcc_info['order_id'],'isdeleted'=>0]);
                if(!empty($dps_info)){
                    $finish_quantities = $dps_info['finish_quantities']-1;
                    $dps_data['finish_quantities'] = $finish_quantities;
                    if($dps_info['isDone'] == 1){
                        $dps_data['isDone'] = 0;
                    }
                    DispatchingProgressSummery::getUpdate(['id' => $dps_info['id']],$dps_data);
                }
                //3.判断该订单是否全部加工完毕
                //如果该产品对应规则的产品全部加工完毕，则需还原更改订单加工状态
                if($wcc_info['order_dispatching_is_producing_done'] == 1){
                    Order::getUpdate(['orderId' => $wcc_info['order_id']],[
                        'dispatching_is_producing_done'=>0
                    ]);
                    $order_inc_num = -1;
                    //判断对应司机的订单数，如果司机信息一致，则司机订单-1
                    if($param['logistic_truck_No']>0){
                        if($wcc_info['logistic_truck_No'] == $param['logistic_truck_No']){
                            $driver_order_inc_num = -1;
                        }else{
                            $driver_order_inc_num = 0;
                        }
                    }else{
                        $driver_order_inc_num = -1;
                    }
                }
                Db::commit();
                $data = [
                    'driver_order_inc_num' => $driver_order_inc_num,//对应司机的订单数是否增加
                    'order_inc_num' => $order_inc_num,//订单总数是否增加
                    'is_product_guige1_done' => $is_product_guige1_done,//当前加工产品对应的规格（没有规格即当前产品）是否加工完毕
                    'is_product_guige1_all_done' => $is_product_guige1_all_done, //当前产品（包括所有规格）是否全部加工完毕
                    'is_cate_all_done' => $is_cate_all_done
                ];
                $DispatchingItemBehaviorLog = new DispatchingItemBehaviorLog();
                $log_data = [
                    "product_id" => $wcc_info['product_id'],
                    "guige1_id" => $wcc_info['guige1_id'],
                    "wj_customer_coupon_id" => $param['id']
                ];
                $DispatchingItemBehaviorLog->addProducingBehaviorLog($user_id,$businessId,4,$wcc_info['logistic_delivery_date'],$log_data);
                return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$data);
            }

        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return show(config('status.code')['system_error']['code'], $e->getMessage());
        }
    }

    //修改全部订单明细状态
    public function pickAllChangeProductItemStatus()
    {
        //接收参数
        $param = $this->request->only(['logistic_delivery_date','logistic_truck_No','product_id','guige1_id','is_producing_done']);
        $validate = new IndexValidate();
        if (!$validate->scene('changePickAllProductOrderStatus')->check($param)) {
            return show(config('status.code')['param_error']['code'], $validate->getError());
        }

        try{
            Db::startTrans();

            $businessId = $this->getBusinessId();
            $user_id = $this->getMemberUserId();//当前操作用户
            $order_inc_num = 0;//加工完成订单数据新增
            $driver_order_inc_num = 0;//对应的司机加工订单数据新增
            $is_product_guige1_done = 0;//该产品/规格对应的总量是否完毕
            $is_product_guige1_all_done = 0;//该产品是否所有规格都完毕
            $is_cate_all_done = 0;//该分类下的产品是否全部完成

            $WjCustomerCoupon = new WjCustomerCoupon();
            //1.获取该产品的所有订单数据
            $product_data = $WjCustomerCoupon->getWccProductList($businessId,$user_id,$param['logistic_delivery_date'],$param['logistic_truck_No'],$param['product_id']);
            if (!$product_data) {
                return show(config('status.code')['order_error']['code'], config('status.code')['order_error']['msg']);
            }
            //获取该产品的状态
            $product_guige_data = [];
            if($param['guige1_id'] > 0){
                foreach ($product_data as $v){
                    if($v['guige1_id'] == $param['guige1_id']){
                        $product_guige_data[] = $v;
                    }
                }
            }else{
                $product_guige_data = $product_data;
            }
            $done = $WjCustomerCoupon->getProductGuigeStatus($product_guige_data,$user_id);
            if($done['status'] != 1){
                return show(config('status.code')['product_plan_approved_error']['code'], config('status.code')['product_plan_approved_error']['msg']);
            }
            $id_arr = [];//存储所有相关的订单明细id
            $order_id_arr = [];//存储需要处理的订单id
            $order_data = [];//存储需要处理的订单
            $add_quantity = 0;//需要增加的总数量
            //计算完成的总数
            $sum_quantities = 0;//该产品的总数量
            $guige_sum_quantities = 0;//该规格的总数量
            $finish_quantities = 0;//该产品完成的总数量
            $guige_finish_quantities = 0;//该规格完成的总数量
            foreach ($product_data as $v){
                if($v['dispatching_is_producing_done'] == 1){
                    $finish_quantities += $v['customer_buying_quantity'];
                    if($param['guige1_id'] > 0 && $v['guige1_id'] == $param['guige1_id']){
                        $guige_finish_quantities += $v['customer_buying_quantity'];
                    }
                }
                $sum_quantities += $v['customer_buying_quantity'];
                if($param['guige1_id'] > 0){
                    if($v['guige1_id'] == $param['guige1_id']){
                        $guige_sum_quantities += $v['customer_buying_quantity'];
                        if($v['dispatching_is_producing_done'] == 0 || $v['dispatching_is_producing_done'] == 2){
                            $id_arr[] = $v['id'];
                            $order_id_arr[] = $v['order_id'];
                            $order_data[] = $v;
                            $add_quantity += $v['customer_buying_quantity'];
                        }
                    }
                } else {
                    if($v['dispatching_is_producing_done'] == 0 || $v['dispatching_is_producing_done'] == 2) {
                        $id_arr[] = $v['id'];
                        $order_id_arr[] = $v['order_id'];
                        $order_data[] = $v;
                        $add_quantity += $v['customer_buying_quantity'];
                    }
                }
            }
            //一.已处理和正在处理流程
            if($param['is_producing_done'] == 1){
                //1-1.判断该产品是否有人加工，无人加工不可点击已处理
                if(!($done['operator_user_id'] > 0)){
                    return show(config('status.code')['summary_process_error']['code'], config('status.code')['summary_process_error']['msg']);
                }
                //如果当前操作员工处理员工是否是同一个人
                if($done['operator_user_id'] != $user_id){
                    return show(config('status.code')['lock_user_deal_error']['code'], config('status.code')['lock_user_deal_error']['msg']);
                }
                //2.更新该产品加工数量和状态
                WjCustomerCoupon::getUpdate(['id' => $id_arr],['dispatching_item_operator_user_id'=>$user_id,'dispatching_is_producing_done'=>$param['is_producing_done']]);
                //2-2。同时更新按订单拣货的汇总表,该订单是否全部拣货完成
                foreach ($order_id_arr as $v){
                    $dps_info = DispatchingProgressSummery::getOne(['orderId' => $v, 'isDone' => 0, 'isdeleted' => 0]);
                    if (!empty($dps_info)) {
                        $dps_data = [];
                        $finish_quantities = $dps_info['finish_quantities'] + 1;
                        $dps_data['finish_quantities'] = $finish_quantities;
                        if ($finish_quantities == $dps_info['sum_quantities']) {
                            $dps_data['isDone'] = 1;
                        }
                        DispatchingProgressSummery::getUpdate(['id' => $dps_info['id']], $dps_data);
                    }
                }
                //产品完成总数量增加,判断是否完成
                $finish_quantities += $add_quantity;
                if ($param['guige1_id'] > 0) {
                    $guige_finish_quantities += $add_quantity;
                    if($guige_finish_quantities == $guige_sum_quantities){
                        $is_product_guige1_done = 1;
                        if($finish_quantities == $sum_quantities){
                            $is_product_guige1_all_done = 1;
                        }
                    }
                } else {
                    if($finish_quantities == $sum_quantities){
                        $is_product_guige1_all_done = 1;
                    }
                }
                //如果产品全部完成，判断该产品对应的分类是否完成
                if($is_product_guige1_all_done == 1){
                    $cate_id = $product_data[0]['cate_id'];
                    $count = $WjCustomerCoupon->getWccOrderDone('',$businessId,$param['logistic_delivery_date'],$param['logistic_truck_No'],'',$cate_id,2);
                    if($count == 0){
                        $is_cate_all_done = 1;
                    }
                }
                //3.判断该订单是否全部加工完毕
                //如果该产品对应规则的产品全部加工完毕，则更改订单加工状态
                foreach ($order_data as $v){
                    $count = $WjCustomerCoupon->getWccOrderDone($v['order_id'],'','','','','',2);
                    if($count == 0){
                        Order::getUpdate(['orderId' => $v['order_id'],],[
                            'dispatching_is_producing_done'=>1
                        ]);
                        $order_inc_num += 1;
                        //判断对应司机的订单数，如果司机信息一致，则司机订单+1
                        if($param['logistic_truck_No']>0){
                            if($v['logistic_truck_No'] == $param['logistic_truck_No']){
                                $driver_order_inc_num += 1;
                            }
                        }else{
                            $driver_order_inc_num += 1;
                        }
                    }
                }
                Db::commit();
                $DispatchingItemBehaviorLog = new DispatchingItemBehaviorLog();
                foreach ($id_arr as $v){
                    $log_data = [
                        "product_id" => $param['product_id'],
                        "guige1_id" => $param['guige1_id'],
                        "wj_customer_coupon_id" => $v
                    ];
                    $DispatchingItemBehaviorLog->addProducingBehaviorLog($user_id,$businessId,8,$param['logistic_delivery_date'],$log_data);
                }
                $data = [
                    'driver_order_inc_num' => $driver_order_inc_num,//对应司机的订单数是否增加
                    'order_inc_num' => $order_inc_num,//订单总数是否增加
                    'is_product_guige1_done' => $is_product_guige1_done,//当前加工产品对应的规格（没有规格即当前产品）是否加工完毕
                    'is_product_guige1_all_done' => $is_product_guige1_all_done, //当前产品（包括所有规格）是否全部加工完毕
                    'is_cate_all_done' => $is_cate_all_done,
                    'add_quantity' => $add_quantity
                ];
                return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$data);
            }
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return show(config('status.code')['system_error']['code'], $e->getMessage());
        }
    }

    //修改加工数据
    public function editBuyingQuantity()
    {
        //接收参数
        $param = $this->request->only(['id','new_customer_buying_quantity']);
        $validate = new IndexValidate();
        if (!$validate->scene('editBuyingQuantity')->check($param)) {
            return show(config('status.code')['param_error']['code'], $validate->getError());
        }

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();//当前操作用户

        //1.获取加工明细信息
        $WjCustomerCoupon = new WjCustomerCoupon();
        $wcc_info = $WjCustomerCoupon->getWccInfo($param['id'],$businessId);
        if (!$wcc_info) {
            return show(config('status.code')['order_error']['code'], config('status.code')['order_error']['msg']);
        }

        //2.更新该产品加工数量和状态
        if($wcc_info['new_customer_buying_quantity'] != $param['new_customer_buying_quantity']){
            try{
                Db::startTrans();
                $res = WjCustomerCoupon::getUpdate(['id' => $wcc_info['id']],['new_customer_buying_quantity'=>$param['new_customer_buying_quantity']]);
                //1.判断是否需要总箱数,一旦起始标签数<=1,则修改数量时会判断是否修改订单明细对应的箱数和总箱数
                $WjCustomerCoupon->updateOrderItemBox($wcc_info);
                //2.将修改数量加入日志
                $DispatchingItemBehaviorLog = new DispatchingItemBehaviorLog();
                $log_data = [
                    "product_id" => $wcc_info['product_id'],
                    "guige1_id" => $wcc_info['guige1_id'],
                    "wj_customer_coupon_id" => $param['id'],
                    "new_customer_buying_quantity" => $param['new_customer_buying_quantity']
                ];
                $DispatchingItemBehaviorLog->addProducingBehaviorLog($user_id,$businessId,5,$wcc_info['logistic_delivery_date'],$log_data);
                Db::commit();
                return show(config('status.code')['success']['code'],config('status.code')['success']['msg']);
            } catch (\Exception $e) {
                // 回滚事务
                Db::rollback();
                return show(config('status.code')['system_error']['code'], $e->getMessage());
            }
        } else {
            return show(config('status.code')['success']['code'],config('status.code')['success']['msg']);
        }
    }

    //获取非加工产品日志数据
    public function pickProductItemLogData()
    {
        $param = $this->request->only(['logistic_delivery_date','product_id','guige1_id','wcc_id']);
        $param['guige1_id'] = isset($param['guige1_id']) ? ($param['guige1_id']?:0) : 0;
        $param['wcc_id'] = isset($param['wcc_id']) ? ($param['wcc_id']?:0) : 0;

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();

        $DispatchingItemBehaviorLog = new DispatchingItemBehaviorLog();
        $res = $DispatchingItemBehaviorLog->getLogData($businessId,$user_id,$param);
        return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$res);
    }

    /**
     * 修改box数量
     */
    public function editBoxNumber()
    {
        $param = $this->request->only(['id','num','type']);
        $validate = new IndexValidate();
        if (!$validate->scene('editBoxNumber')->check($param)) {
            return show(config('status.code')['param_error']['code'], $validate->getError());
        }

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();

        try {
            if($param['type'] == 1){
                $field = 'current_box_sort_id';
            }else{
                $field = 'edit_boxesNumber';
            }
            $data[$field] = $param['num'];
            //1.获取加工明细信息
            $WjCustomerCoupon = new WjCustomerCoupon();
            $Order = new Order();
            $wcc_info = $WjCustomerCoupon->getWccInfo($param['id'],$businessId);
            if (!$wcc_info) {
                return show(config('status.code')['order_error']['code'], config('status.code')['order_error']['msg']);
            }
            $wcc_info = $Order->getOrderItemBoxSortId($wcc_info);
            if($param['type'] == 1){
                if(!empty($wcc_info['print_label_sorts_arr'])){
                    if(!in_array($param['num'],$wcc_info['print_label_sorts_arr'])){
                        return show(config('status.code')['item_boxnum_error']['code'], config('status.code')['item_boxnum_error']['msg']);
                    }
                }else{
                    if($param['num'] != $wcc_info['current_box_sort_id']){
                        return show(config('status.code')['item_boxnum_error']['code'], config('status.code')['item_boxnum_error']['msg']);
                    }
                }
            }else{
                //总表签数最少限制： 通过算法可以算出总箱数。标签最小数不能小于这个数字，只能大于这个数字。比如计算出总箱数为28 ，那么不可以设置27或以下数字。
                //可以设置超过总箱数的设置，但为了避免误操作带来的极度废纸。比如本来18箱，它输入了188箱，然后选择按print order键，导致输出 188张标签，因此，可以设置最大可更改数量为 2倍的最大箱数，比如 箱数为18，那么最大这个更改的最大标签数的设置为 18-36 .
                if($param['num'] < $wcc_info['old_boxesNumber']){
                    return show(config('status.code')['boxnum_min_error']['code'], config('status.code')['boxnum_min_error']['msg']);
                }
                if($param['num'] > 2*$wcc_info['old_boxesNumber']){
                    return show(config('status.code')['boxnum_max_error']['code'], config('status.code')['boxnum_max_error']['msg']);
                }
            }
            Db::startTrans();
            if($wcc_info[$field]!=$param['num']){
                if($param['type'] == 2){
                    //更改箱子数量
                    Order::getUpdate(['orderId'=>$wcc_info['order_id']],$data);
                    //同时将修改数量加入日志
                    $DispatchingItemBehaviorLog = new DispatchingItemBehaviorLog();
                    $log_data = [
                        "wj_customer_coupon_id" => $param['id'],
                        "$field" => $param['num']
                    ];
                    $DispatchingItemBehaviorLog->addProducingBehaviorLog($user_id,$businessId,5,$wcc_info['logistic_delivery_date'],$log_data);
                }else{
                    WjCustomerCoupon::getUpdate(['id'=>$param['id']],$data);
                }
            }
            Db::commit();
            return show(config('status.code')['success']['code'],config('status.code')['success']['msg']);
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return show(config('status.code')['system_error']['code'], $e->getMessage());
        }
    }

    /**
     *打印时获取最新的箱数以及打印后箱数序号更新
     */
    public function orderBoxsNumber()
    {
        $param = $this->request->only(['id_arr','print_type','sortId']);
        $param['sortId'] = (array)$param['sortId']??[0];

        $validate = new IndexValidate();
        if (!$validate->scene('orderBoxsNumber')->check($param)) {
            return show(config('status.code')['param_error']['code'], $validate->getError());
        }

        $businessId = $this->getBusinessId();
        $user_id = $this->getMemberUserId();

        try {
            //1.获取订单最新的箱数信息
            $box_list = WjCustomerCoupon::alias('wcc')
                ->field('wcc.id,wcc.restaurant_menu_id product_id,wcc.guige1_id,wcc.customer_buying_quantity,wcc.new_customer_buying_quantity,wcc.boxnumber,wcc.splicingboxnumber,wcc.boxnumber,wcc.splicingboxnumber,wcc.print_label_sorts,wcc.mix_box_group,wcc.mix_box_sort_id,wcc.current_box_sort_id,o.orderId,o.logistic_delivery_date,o.boxesNumber,o.boxesNumberSortId,o.edit_boxesNumber,rm.unitQtyPerBox,rm.menu_en_name,rm.menu_id,rm.unit_en,rmo.menu_en_name guige_name')
                ->leftJoin('order o','o.orderId = wcc.order_id')
                ->leftJoin('restaurant_menu rm','rm.id = wcc.restaurant_menu_id')
                ->leftJoin('restaurant_menu_option rmo','rmo.id = wcc.guige1_id')
                ->where(['wcc.id'=>$param['id_arr']])
                ->select()->toArray();
            if (!$box_list) {
                return show(config('status.code')['order_error']['code'], config('status.code')['order_error']['msg']);
            }
            $Order = new Order();
            foreach($box_list as $k=>&$v){
                $v['new_customer_buying_quantity'] = $v['new_customer_buying_quantity']>=0?$v['new_customer_buying_quantity']:$v['customer_buying_quantity'];
                $v['guige_name'] = empty($v['guige_name']) ? '' : $v['guige_name'];
                //获取该产品的所有打印标签记录-（如果有记录则显示最后一个打印标签，如果没有记录，则显示当前订单的总序号）
                $v['current_boxesNumberSortId'] = $param['sortId'][$k]??0;//记录当前的序号id
                $v = $Order->getOrderItemBoxSortId($v);
            }
            Db::startTrans();
            $WjCustomerCoupon = new WjCustomerCoupon();
            $Order = new Order();
            //根据打印类型更新数据
            switch ($param['print_type']){
                case 1://fit print all 全部打印，需要修改该产品所有的订单明细所需要的箱数排序的全部序号
                case 2://fit print 按照单个订单明细打印所有的箱数
                    foreach($box_list as $k=>&$v){
                        //更新订单明细需要打印的标签号
                        $res = $this->updateWccBox($v,$param['sortId'][$k],$param['print_type']);
                        $v['newboxesNumberSortId'] = $res['newboxesNumberSortId'];
                        $v['print_label_sorts'] = $res['print_label_sorts'];
                        $v['mix_group_data'] = $res['mix_group_data'];
                        $v['mix_box_sort_id'] = $res['mix_box_sort_id'];
                    }
                    break;
                case 3://print order 打印该订单的全部标签
                    //同时更新明细的标签序号，明细的标签序号更新与fit print模式相同
                    $id_arr = array_column($box_list,'id');
                    foreach($box_list as $k=>&$v){
                        $res = $this->updateWccBox($v,$param['sortId'][$k],3);
                        $v['newboxesNumberSortId'] = $res['newboxesNumberSortId'];
                        $v['print_label_sorts'] = $res['print_label_sorts'];
                        $v['mix_group_data'] = $res['mix_group_data'];
                        $v['mix_box_sort_id'] = $res['mix_box_sort_id'];
                        $v['print_label_sorts_arr'] = array_filter(explode(',',$v['print_label_sorts']));
                        $v['print_label_sorts_length'] = count($v['print_label_sorts_arr']);
                        $v = $Order->getOrderItemBoxSortId($v);
                        if(isset($res['mix_update_data'])){
                            foreach ($res['mix_update_data'] as $kk=>$vv){
                                $key = array_search($kk,$id_arr);
                                $box_list[$key]['mix_box_sort_id'] = $vv['mix_box_sort_id'];
                                $box_list[$key]['print_label_sorts'] = $vv['print_label_sorts'];
                            }
                        }
                        if($k<count($box_list)-1){
                            $box_list[$k+1]['boxesNumberSortId'] = $res['newboxesNumberSortId'];//存储新的序号id
                        }
                    }
                    //如果修改后的总标签数与原先的总标签数更新该订单的所有标签
                    if($box_list[0]['boxesNumber']!=$box_list[0]['old_boxesNumber']){
                        $where['orderId'] = $box_list[0]['orderId'];
                        $update['boxesNumberSortId'] = $box_list[0]['boxesNumber'] + 1;
                        Order::getUpdate($where, $update);
                    }
                    break;
                case 0://默认打印一张有序号的标签
                case 4://blank label 每次输出一张空白标签
                    foreach($box_list as $k=>&$v){
                        //更新订单明细需要打印的标签号
                        $res = $this->updateWccBox($v,$param['sortId'][$k],$param['print_type']);
                        $v['newboxesNumberSortId'] = $res['newboxesNumberSortId'];
                        $v['print_label_sorts'] = $res['print_label_sorts'];
                        $v['mix_group_data'] = $res['mix_group_data'];
                        $v['mix_box_sort_id'] = $res['mix_box_sort_id'];
                    }
                    break;
            }
            Db::commit();
            //如果是全部打印，只可以打印一次。之后不可已再选择全部打印
            if($param['print_type'] == 1){
                $redis = redis_connect();
                $logistic_delivery_date = $box_list[0]['logistic_delivery_date'];
                $product_id = $box_list[0]['product_id'];
                $guige_id = $box_list[0]['guige1_id'];
                $key = 'fit_print_all_'.$logistic_delivery_date.'_'.$product_id.'_'.$guige_id;
                $expire_time = 7*86400;
                $redis->setex($key,$expire_time,1);
            }
            return show(config('status.code')['success']['code'],config('status.code')['success']['msg'],$box_list);
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return show(config('status.code')['system_error']['code'], $e->getMessage());
        }
    }

    /**
     * 更新订单明细的标签号码和订单的最新的标签号码
     * @param $data 明细数据
     * @param $sortId 当前指定的打印标签序号id
     * @param $print_type 0-one label 1-Fit print all 2-fit print 3-print order 4-blank label
     * @throws \Exception
     */
    public function updateWccBox($data,$sortId=0,$print_type){
        $mix_group_arr = [];//存储拼箱的数据
        //如果当前打印的序号是混合标签id,则需要输出混合标签信息
        if($sortId>0 && $data['mix_box_sort_id']==$sortId || $data['splicingboxnumber'] > 0 && $data['mix_box_group'] > 0){
            $mix_group_arr = WjCustomerCoupon::alias('wcc')
                ->field('wcc.id,wcc.restaurant_menu_id product_id,wcc.guige1_id,wcc.customer_buying_quantity,wcc.new_customer_buying_quantity,wcc.boxnumber,wcc.splicingboxnumber,wcc.print_label_sorts,wcc.current_box_sort_id,rm.unitQtyPerBox,rm.menu_en_name,rm.menu_id,rm.unit_en,rmo.menu_en_name guige_name')
                ->leftJoin('order o','o.orderId = wcc.order_id')
                ->leftJoin('restaurant_menu rm','rm.id = wcc.restaurant_menu_id')
                ->leftJoin('restaurant_menu_option rmo','rmo.id = wcc.guige1_id')
                ->where([
                    ['wcc.order_id','=',$data['orderId']],
//                    ['wcc.id','<>',$data['id']],
                    ['wcc.mix_box_group','=',$data['mix_box_group']]
                ])
                ->select()->toArray();
            foreach($mix_group_arr as &$v){
                $v['new_customer_buying_quantity'] = $v['new_customer_buying_quantity']>=0?$v['new_customer_buying_quantity']:$v['customer_buying_quantity'];
                if($v['new_customer_buying_quantity'] <= $v['unitQtyPerBox']){
                    $v['mix_quantity'] = $v['new_customer_buying_quantity'];
                }else{
                    $v['mix_quantity'] = number_format($v['new_customer_buying_quantity']-($v['boxnumber']*$v['unitQtyPerBox']),2);
                }
                $v['guige_name'] = empty($v['guige_name']) ? '' : $v['guige_name'];
            }
        }
        //获取该标签已打印的个数。如果打印标签总数<该产品的总箱数，则更新标签剩余的未打印的标签
        if($data['splicingboxnumber'] > 0 && $data['mix_box_group'] > 0){
            $item_box_number = $data['boxnumber']+1;
        }else{
            $item_box_number = $data['boxnumber'];
        }
        $order_inc_number = 0;//记录订单需要增加的序号数量
        if(!empty($data['print_label_sorts'])){
            $print_label_sorts_arr = array_filter(explode(',',$data['print_label_sorts']));
        }else{
            $print_label_sorts_arr = [];
        }
        //如果当前的序号id不在已打印的数组,则打印最新的标签
        if(!in_array($sortId,$data['print_label_sorts_arr'])&&$print_type!=3||$print_type==3){
            if(count($print_label_sorts_arr) < $item_box_number) {
                //1.判断整箱数是否打印完成，如果未打印完成，需要先将整箱数打印完，再打印拼箱数
                $print_label_sorts = '';
                $end_i = 0;//计算整箱数还有几箱需要打印
                $is_print_splicing = 0;//判断是否需要打印拼箱 0否 1是
                $splicing_label = 0;//存放拼箱标签id
                //$print_type为fit print 和 fit print all时，需要计算剩余打印多少张（先计算整箱部分，再计算拼箱部分）
                //判断已打标签中是否包含混合标签
                if($data['mix_box_sort_id']>0&&in_array($data['mix_box_sort_id'],$print_label_sorts_arr)){
                    $is_print_splicing=0;
                    $int_print_label_sorts_arr=$print_label_sorts_arr;//存储整数箱的标签数据
                    $key=array_search($data['mix_box_sort_id'],$int_print_label_sorts_arr);
                    array_splice($int_print_label_sorts_arr,$key,1);
                    $splicing_label = $data['mix_box_sort_id'];
                }else{
                    $is_print_splicing=1;
                    $int_print_label_sorts_arr=$print_label_sorts_arr;
                }
                if (in_array($print_type,[1,2,3])) {
                    $end_i = $data['boxnumber'] - count($int_print_label_sorts_arr);
                    $order_inc_number = $item_box_number - count($print_label_sorts_arr);
                }
                //$print_type为one label时，只可以打印一张（先计算整箱部分（如果整箱已打印完，再打印拼箱），再计算拼箱部分）
                if (in_array($print_type,[0]) ){
                    if($data['boxnumber'] - count($int_print_label_sorts_arr)>0){
                        $end_i = 1;
                    }else{
                        $end_i = 0;
                        $is_print_splicing = 1;
                    }
                    $order_inc_number = 1;
                }
                for ($i = 0; $i < $end_i; $i++) {
                    $print_label_sorts .= $data['boxesNumberSortId'] + $i . ',';
                }
                $print_label_sorts = trim($print_label_sorts, ',');
                $print_label_sorts = trim($data['print_label_sorts'] . ',' . $print_label_sorts, ',');
                //如果拼箱数>0并且已拼箱分组的,说明有拼箱，需要找到一起拼箱的数据
                $update_label_sorts = [];//存储更新的打印数据
                $mix_update_data = [];//存储混合标签的更新数据，订单打印时同步数据使用
                if ($is_print_splicing == 1 && $data['splicingboxnumber'] > 0 && $data['mix_box_group'] > 0) {
                    $splicing_label = $data['boxesNumberSortId'] + $order_inc_number - 1;//拼箱的箱号
                    $print_label_sorts = $print_label_sorts.','.$splicing_label;
                    //如果有在一个箱的拼箱数据，则修改该明细的打印序号
                    if (!empty($mix_group_arr)) {
                        foreach ($mix_group_arr as $mgak => $mgav) {
                            if($mgav['id'] != $data['id']){
                                $mga_print_label_sorts = $mgav['print_label_sorts'] . ',' . $splicing_label;
                                $update_mix_data = ['id' => $mgav['id'], 'print_label_sorts' => trim($mga_print_label_sorts, ","), 'mix_box_sort_id' => $splicing_label, 'current_box_sort_id'=>$v['current_box_sort_id']];
                                $update_label_sorts[] = $update_mix_data;
                                $mix_update_data[$mgav['id']] = $update_mix_data;
                            }
                        }
                    }
                }
                $wcc_print_label_sorts = trim($print_label_sorts, ",");//当前明细的标签信息
                $update_label_sorts[] = ['id' => $data['id'], 'print_label_sorts' => $wcc_print_label_sorts, 'mix_box_sort_id' => $splicing_label, 'current_box_sort_id'=>0];
                $WjCustomerCoupon = new WjCustomerCoupon();
                $res = $WjCustomerCoupon->saveAll($update_label_sorts);
                //同时更新订单的最新序号
                $where['orderId'] = $data['orderId'];
                $update['boxesNumberSortId'] = $data['boxesNumberSortId'] + $order_inc_number;
                Order::getUpdate($where, $update);
                $res['newboxesNumberSortId'] = $update['boxesNumberSortId'];//最新的订单标签序号
                $res['print_label_sorts'] = $wcc_print_label_sorts;//该产品的所有打印标签序号
                $res['mix_group_data'] = $mix_group_arr;//混合标签信息
                $res['mix_box_sort_id'] = $splicing_label;//拼箱标签id
                $res['mix_update_data'] = $mix_update_data;//存储混合标签的更新数据，订单打印时同步数据使用
            }else{
                $res['newboxesNumberSortId'] = $print_type==3?$data['boxesNumberSortId']:$sortId;
                $res['print_label_sorts'] = $data['print_label_sorts'];
                $res['mix_group_data'] = $mix_group_arr;
                $res['mix_box_sort_id'] = $data['mix_box_sort_id'];//拼箱标签id
            }
        }else{
            $res['newboxesNumberSortId'] = $print_type==3?$data['boxesNumberSortId']:$sortId;
            $res['print_label_sorts'] = $data['print_label_sorts'];
            $res['mix_group_data'] = $mix_group_arr;
            $res['mix_box_sort_id'] = $data['mix_box_sort_id'];//拼箱标签id
        }
        return $res;
    }

}
